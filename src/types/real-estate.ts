import { CalculationResultWithSale } from "./sale-scenario";

/**
 * Interface cho to√†n b·ªô th√¥ng s·ªë ƒë·∫ßu v√†o t√≠nh to√°n BƒêS
 * D·ª±a tr√™n t√†i li·ªáu "Ph√¢n T√≠ch S√¢u Logic & C√¥ng Th·ª©c T√≠nh D√≤ng Ti·ªÅn B·∫•t ƒê·ªông S·∫£n"
 */
export interface RealEstateInputs {
  // === TH√îNG TIN GIAO D·ªäCH ===
  /** Gi√° tr·ªã b·∫•t ƒë·ªông s·∫£n (VND) - B·∫Øt bu·ªôc */
  giaTriBDS: number;

  /** V·ªën t·ª± c√≥ ban ƒë·∫ßu (VND) - B·∫Øt bu·ªôc */
  vonTuCo: number;

  /** Chi ph√≠ trang b·ªã b·ªï sung (n·ªôi th·∫•t, s·ª≠a ch·ªØa) (VND) */
  chiPhiTrangBi: number;

  /** üÜï Ng√†y mua d·ª± ki·∫øn/th·ª±c t·∫ø - for future scenario analysis */
  purchaseDate?: Date;

  // === V·ªêN BAN ƒê·∫¶U ===
  /** T·ª∑ l·ªá vay tr√™n GiaTriBDS (%) - M·∫∑c ƒë·ªãnh 70% */
  tyLeVay: number;

  /** T·ªïng chi ph√≠ m·ªôt l·∫ßn khi mua: Thu·∫ø tr∆∞·ªõc b·∫° (0.5%), ph√≠ c√¥ng ch·ª©ng, ph√≠ m√¥i gi·ªõi... (% c·ªßa GiaTriBDS) */
  chiPhiMua: number;

  /** Ph√≠ b·∫£o hi·ªÉm nh√¢n th·ªç cho kho·∫£n vay, th∆∞·ªùng tr·∫£ 1 l·∫ßn ho·∫∑c trong v√†i nƒÉm ƒë·∫ßu (% c·ªßa SoTienVay) */
  baoHiemKhoanVay: number;

  // === VAY V·ªêN ===
  /** L√£i su·∫•t vay ∆∞u ƒë√£i ban ƒë·∫ßu (%/nƒÉm) - M·∫∑c ƒë·ªãnh 8% */
  laiSuatUuDai: number;

  /** Th·ªùi gian h∆∞·ªüng l√£i su·∫•t ∆∞u ƒë√£i (th√°ng) - M·∫∑c ƒë·ªãnh 12 th√°ng */
  thoiGianUuDai: number;

  /** L√£i su·∫•t th·∫£ n·ªïi sau ∆∞u ƒë√£i (%/nƒÉm) - M·∫∑c ƒë·ªãnh 12% */
  laiSuatThaNoi: number;

  /** Th·ªùi gian vay (nƒÉm) - B·∫Øt bu·ªôc, m·∫∑c ƒë·ªãnh 20 nƒÉm */
  thoiGianVay: number;

  // === V·∫¨N H√ÄNH & CHI PH√ç ƒê·ªäNH K·ª≤ ===
  /** Doanh thu cho thu√™ h√†ng th√°ng (VND) */
  tienThueThang: number;

  /** Ph√≠ qu·∫£n l√Ω, v·∫≠n h√†nh h√†ng th√°ng (VND) */
  phiQuanLy: number;

  /** Ph√≠ b·∫£o hi·ªÉm t√†i s·∫£n, ch√°y n·ªï h√†ng nƒÉm (% c·ªßa GiaTriBDS) */
  baoHiemTaiSan: number;

  // === D·ª∞ PH√íNG & CHI PH√ç KH√îNG TH∆Ø·ªúNG XUY√äN ===
  /** T·ª∑ l·ªá BƒêS c√≥ kh√°ch thu√™ trong nƒÉm. Ph·∫ßn c√≤n l·∫°i ch√≠nh l√† chi ph√≠ c∆° h·ªôi do b·ªè tr·ªëng (%) */
  tyLeLapDay: number;

  /** Chi ph√≠ b·∫£o tr√¨, s·ª≠a ch·ªØa nh·ªè l·∫∑t v·∫∑t (% GiaTriBDS/nƒÉm) */
  phiBaoTri: number;

  /** Qu·ªπ d·ª± ph√≤ng cho c√°c h·∫°ng m·ª•c l·ªõn, tu·ªïi th·ªç cao (thay m√°i, s·ª≠a h·ªá th·ªëng ·ªëng n∆∞·ªõc...) (% c·ªßa GiaTriBDS/nƒÉm) */
  duPhongCapEx: number;

  // === THU·∫æ & CHI PH√ç THO√ÅI V·ªêN ===
  /** Thu·∫ø TNCN + GTGT t·ª´ vi·ªác cho thu√™ (n·∫øu doanh thu > 100tr/nƒÉm) (%) */
  thueSuatChoThue: number;

  /** T·ªïng chi ph√≠ khi b√°n BƒêS (% tr√™n gi√° b√°n), bao g·ªìm thu·∫ø TNCN (2%) v√† ph√≠ m√¥i gi·ªõi */
  chiPhiBan: number;

  // === T√ÄI CH√çNH C√Å NH√ÇN ===
  /** T·ªïng thu nh·∫≠p h√†ng th√°ng (sau thu·∫ø) (VND) - B·∫Øt bu·ªôc */
  thuNhapKhac: number;

  /** T·ªïng chi ph√≠ sinh ho·∫°t h√†ng th√°ng (VND) - B·∫Øt bu·ªôc */
  chiPhiSinhHoat: number;
}

/**
 * Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c th√¥ng s·ªë theo t√†i li·ªáu
 */
export const DEFAULT_VALUES: Partial<RealEstateInputs> = {
  // Giao d·ªãch
  chiPhiTrangBi: 0,
  purchaseDate: undefined, // üÜï Will be set dynamically

  // V·ªën ban ƒë·∫ßu
  tyLeVay: 70,
  chiPhiMua: 2, // 2% c·ªßa GiaTriBDS
  baoHiemKhoanVay: 1.5, // 1.5% c·ªßa SoTienVay

  // Vay v·ªën
  laiSuatUuDai: 8,
  thoiGianUuDai: 12,
  laiSuatThaNoi: 12,
  thoiGianVay: 20,

  // V·∫≠n h√†nh
  tienThueThang: 0,
  phiQuanLy: 0,
  baoHiemTaiSan: 0.15, // 0.15% c·ªßa GiaTriBDS

  // D·ª± ph√≤ng
  tyLeLapDay: 95,
  phiBaoTri: 1, // 1% c·ªßa GiaTriBDS/nƒÉm
  duPhongCapEx: 1, // 1% c·ªßa GiaTriBDS/nƒÉm

  // Thu·∫ø
  thueSuatChoThue: 10,
  chiPhiBan: 3,
};

/**
 * üÜï Helper type for scenario creation
 */
export interface CreateFutureScenarioRequest {
  scenarioName: string;
  futureTimeMonths: number;
  economicScenarioId: string;
  originalInputs: RealEstateInputs;
  maintainEquityRatio: boolean;
  notes?: string;
}

/**
 * üÜï Validation rules for future scenarios
 */
export const FUTURE_SCENARIO_VALIDATION = {
  futureTimeMonths: {
    min: 1, // Minimum 1 month
    max: 120, // Maximum 10 years
    recommended: { min: 6, max: 60 }, // 6 months to 5 years
  },
  scenarioName: {
    minLength: 3,
    maxLength: 100,
  },
  maxScenarios: 10, // Maximum number of future scenarios to compare
} as const;

/**
 * K·∫øt qu·∫£ t√≠nh to√°n t·ª´ng b∆∞·ªõc
 */
export interface CalculationSteps {
  // B∆∞·ªõc 1: T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu
  soTienVay: number;
  vonTuCo: number;
  tongVonBanDau: number;
  baoHiemKhoanVayThucTe: number;

  // B∆∞·ªõc 2: Chi ph√≠ v·∫≠n h√†nh h√†ng th√°ng
  tienTraNHThang: number; // ƒê·ªông theo giai ƒëo·∫°n ∆∞u ƒë√£i/th·∫£ n·ªïi
  chiPhiBaoTriThang: number;
  duPhongCapExThang: number;
  baoHiemTaiSanThang: number;
  tongChiPhiVanHanh: number;

  // B∆∞·ªõc 3: D√≤ng ti·ªÅn r√≤ng t·ª´ BƒêS
  thuNhapThueHieuDung: number;
  thueChoThue_Thang: number;
  dongTienRongBDS: number;

  // B∆∞·ªõc 4: D√≤ng ti·ªÅn cu·ªëi c√πng
  dongTienCuoiCung: number;
}

/**
 * K·∫øt qu·∫£ t√≠nh to√°n to√†n di·ªán
 */
/**
 * Enhanced Calculation Result with scenario metadata
 */
export interface CalculationResult {
  inputs: RealEstateInputs;
  steps: CalculationSteps;

  // Ph√¢n t√≠ch b·ªï sung
  roiHangNam: number; // Return on Investment h√†ng nƒÉm (%)
  paybackPeriod: number; // Th·ªùi gian ho√†n v·ªën (nƒÉm)
  netPresentValue: number; // NPV

  // C·∫£nh b√°o v√† g·ª£i √Ω
  warnings: string[];
  suggestions: string[];

  // Enhanced metadata for scenario comparison
  calculatedAt: string;
  calculationId?: string;
  scenarioName?: string;

  /** üÜï Scenario type for comparison */
  scenarioType?: "buy_now" | "buy_future";

  /** üÜï Economic scenario applied (if any) */
  economicScenarioApplied?: {
    id: string;
    name: string;
    description: string;
  };

  /** üÜï Purchase timing info */
  purchaseTimingInfo?: {
    purchaseDate: Date;
    monthsFromNow?: number;
    projectionYears?: number;
  };

  rentalYield: number; // Thu nh·∫≠p t·ª´ thu√™ (%)
}

/**
 * üÜï Future Scenario Definition
 * Represents a "buy in future" scenario with projected inputs and results
 */
export interface FutureScenario {
  /** Unique identifier */
  id: string;

  /** User-friendly scenario name */
  scenarioName: string;

  /** Future purchase date */
  futureDate: Date;

  /** Number of months from current date */
  monthsFromNow: number;

  /** Economic scenario applied for projection */
  economicScenario: {
    id: string;
    name: string;
    description: string;
    probability: number;
  };

  /** Original inputs (current market conditions) */
  originalInputs: RealEstateInputs;

  /** Projected inputs for future purchase */
  projectedInputs: RealEstateInputs;

  /** Calculation result using projected inputs */
  result: CalculationResultWithSale;

  /** Projection summary */
  projectionSummary: {
    propertyValueChange: number; // %
    rentalIncomeChange: number; // %
    interestRateChange: number; // % points
    projectionWarnings: string[];
  };

  /** Creation metadata */
  createdAt: Date;
  updatedAt?: Date;

  /** User notes */
  notes?: string;
}

/**
 * üÜï Buy Now vs Future Comparison
 * Comprehensive comparison between current purchase and future scenarios
 */
export interface BuyNowVsFutureComparison {
  /** "Buy Now" scenario result */
  buyNowScenario: {
    result: CalculationResultWithSale;
    inputs: RealEstateInputs;
  };

  /** Array of future scenarios to compare */
  futureScenarios: FutureScenario[];

  /** Comparison analysis */
  comparisonAnalysis: {
    /** Best scenario by ROI */
    bestByROI: {
      scenarioType: "buy_now" | "buy_future";
      scenarioId?: string;
      roi: number;
      advantage: string;
    };

    /** Best by total return */
    bestByTotalReturn: {
      scenarioType: "buy_now" | "buy_future";
      scenarioId?: string;
      totalReturn: number;
      advantage: string;
    };

    /** Best by cash flow */
    bestByCashFlow: {
      scenarioType: "buy_now" | "buy_future";
      scenarioId?: string;
      monthlyCashFlow: number;
      advantage: string;
    };

    /** Risk assessment */
    riskAssessment: {
      buyNowRisk: "low" | "medium" | "high";
      futureRisks: {
        scenarioId: string;
        riskLevel: "low" | "medium" | "high";
        riskFactors: string[];
      }[];
    };

    /** Overall recommendation */
    recommendation: {
      preferredStrategy: "buy_now" | "wait_and_buy_future" | "mixed_approach";
      reasoning: string[];
      keyFactors: string[];
      actionItems: string[];
    };
  };

  /** Analysis metadata */
  analysisDate: Date;
  marketContext: {
    marketType: "primary" | "secondary";
    investorType: "new_investor" | "existing_investor";
    currentMarketConditions: string;
  };
}

/**
 * Th√¥ng tin cho vi·ªác so s√°nh nhi·ªÅu k·ªãch b·∫£n
 */
export interface ScenarioComparison {
  scenarios: CalculationResult[];
  bestScenario: {
    byROI: CalculationResult;
    byCashFlow: CalculationResult;
    byPaybackPeriod: CalculationResult;
  };
}

/**
 * C·∫•u h√¨nh preset scenarios cho ng∆∞·ªùi m·ªõi
 */
export interface PresetScenario {
  id: string;
  name: string;
  description: string;
  category: "chung-cu" | "nha-pho" | "dat-nen" | "biet-thu";
  location: "hcm" | "hanoi" | "danang" | "other";
  inputs: Partial<RealEstateInputs>;
}

/**
 * Th√¥ng tin tooltip gi·∫£i th√≠ch cho t·ª´ng tr∆∞·ªùng
 */
export interface FieldTooltip {
  field: keyof RealEstateInputs;
  title: string;
  description: string;
  example?: string;
  warning?: string;
}

/**
 * C·∫•u h√¨nh validation cho form
 */
export interface ValidationRules {
  field: keyof RealEstateInputs;
  required: boolean;
  min?: number;
  max?: number;
  customValidation?: (
    value: number,
    allInputs: RealEstateInputs
  ) => string | null;
}

/**
 * Enum cho c√°c lo·∫°i c·∫£nh b√°o
 */
export enum WarningType {
  HIGH_LOAN_RATIO = "high_loan_ratio",
  NEGATIVE_CASH_FLOW = "negative_cash_flow",
  LOW_RENTAL_YIELD = "low_rental_yield",
  HIGH_VACANCY_RATE = "high_vacancy_rate",
  INSUFFICIENT_INCOME = "insufficient_income",
}

/**
 * Enum cho c√°c lo·∫°i g·ª£i √Ω
 */
export enum SuggestionType {
  REDUCE_LOAN_RATIO = "reduce_loan_ratio",
  INCREASE_RENTAL_INCOME = "increase_rental_income",
  REDUCE_EXPENSES = "reduce_expenses",
  CONSIDER_DIFFERENT_PROPERTY = "consider_different_property",
}

/**
 * Re-export enhanced types for compatibility
 */
export type {
  RealEstateInputsWithSaleAnalysis,
  CalculationResultWithSale,
} from "./sale-scenario";
