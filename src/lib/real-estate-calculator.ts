import { RealEstateInputs, CalculationSteps, CalculationResult, WarningType, SuggestionType } from '@/types/real-estate';
import { 
  calculateDetailedPayments, 
  calculateNPV, 
  calculatePaybackPeriod, 
  calculateCashOnCashReturn,
  calculateRentalYield,
  validateFinancialInputs 
} from './financial-utils';

/**
 * H√†m t√≠nh to√°n ch√≠nh theo c√¥ng th·ª©c trong t√†i li·ªáu
 * "Ph√¢n T√≠ch S√¢u Logic & C√¥ng Th·ª©c T√≠nh D√≤ng Ti·ªÅn B·∫•t ƒê·ªông S·∫£n"
 */
export function calculateRealEstateInvestment(inputs: RealEstateInputs): CalculationResult {
  // Validate inputs tr∆∞·ªõc khi t√≠nh to√°n
  const validationErrors = validateInputs(inputs);
  if (validationErrors.length > 0) {
    throw new Error(`L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o: ${validationErrors.join(', ')}`);
  }

  // B∆Ø·ªöC 1: T√≠nh T·ªïng V·ªën ƒê·∫ßu T∆∞ Ban ƒê·∫ßu (Total Initial Investment)
  const step1 = calculateInitialInvestment(inputs);
  
  // B∆Ø·ªöC 2: T√≠nh T·ªïng Chi Ph√≠ V·∫≠n H√†nh H√†ng Th√°ng (Total Monthly Operating Expenses)
  const step2 = calculateMonthlyOperatingExpenses(inputs, step1.soTienVay);
  
  // B∆Ø·ªöC 3: T√≠nh D√≤ng Ti·ªÅn R√≤ng T·ª´ B·∫•t ƒê·ªông S·∫£n (Property's Net Cash Flow)
  const step3 = calculatePropertyNetCashFlow(inputs, step2.tongChiPhiVanHanh);
  
  // B∆Ø·ªöC 4: T√≠nh D√≤ng Ti·ªÅn Cu·ªëi C√πng (Final Personal Cash Flow)
  const step4 = calculateFinalCashFlow(inputs, step3.dongTienRongBDS);
  
  // G·ªôp t·∫•t c·∫£ k·∫øt qu·∫£ steps
  const steps: CalculationSteps = {
    ...step1,
    ...step2,
    ...step3,
    ...step4
  };
  
  // Ph√¢n t√≠ch b·ªï sung
  const analysis = calculateAdvancedMetrics(inputs, steps);
  
  // C·∫£nh b√°o v√† g·ª£i √Ω
  const warnings = generateWarnings(inputs, steps);
  const suggestions = generateSuggestions(inputs, steps);
  
  return {
    inputs,
    steps,
    ...analysis,
    warnings,
    suggestions,
    calculatedAt: new Date()
  };
}

/**
 * B∆Ø·ªöC 1: T√≠nh T·ªïng V·ªën ƒê·∫ßu T∆∞ Ban ƒê·∫ßu
 * Theo c√¥ng th·ª©c:
 * - SoTienVay = GiaTriBDS * TyLeVay
 * - VonTuCo = GiaTriBDS - SoTienVay  
 * - TongVonBanDau = VonTuCo + ChiPhiTrangBi + ChiPhiMua + BaoHiemKhoanVay
 */
function calculateInitialInvestment(inputs: RealEstateInputs): Pick<CalculationSteps, 'soTienVay' | 'vonTuCo' | 'tongVonBanDau'> {
  const soTienVay = inputs.giaTriBDS * (inputs.tyLeVay / 100);
  const vonTuCo = inputs.giaTriBDS - soTienVay;
  
  // Chi ph√≠ mua l√† % c·ªßa gi√° tr·ªã BƒêS
  const chiPhiMuaThucTe = inputs.giaTriBDS * (inputs.chiPhiMua / 100);
  
  // B·∫£o hi·ªÉm kho·∫£n vay l√† % c·ªßa s·ªë ti·ªÅn vay
  const baoHiemKhoanVayThucTe = soTienVay * (inputs.baoHiemKhoanVay / 100);
  
  const tongVonBanDau = vonTuCo + inputs.chiPhiTrangBi + chiPhiMuaThucTe + baoHiemKhoanVayThucTe;
  
  return {
    soTienVay,
    vonTuCo,
    tongVonBanDau
  };
}

/**
 * B∆Ø·ªöC 2: T√≠nh T·ªïng Chi Ph√≠ V·∫≠n H√†nh H√†ng Th√°ng
 * Theo c√¥ng th·ª©c:
 * - TienTraNHThang = PMT(...) (T√≠nh ƒë·ªông theo giai ƒëo·∫°n ∆∞u ƒë√£i v√† th·∫£ n·ªïi)
 * - ChiPhiBaoTriThang = (GiaTriBDS * PhiBaoTri) / 12
 * - DuPhongCapExThang = (GiaTriBDS * DuPhongCapEx) / 12  
 * - BaoHiemTaiSanThang = (GiaTriBDS * BaoHiemTaiSan) / 12
 * - TongChiPhiVanHanh = TienTraNHThang + PhiQuanLy + ChiPhiBaoTriThang + DuPhongCapExThang + BaoHiemTaiSanThang
 */
function calculateMonthlyOperatingExpenses(
  inputs: RealEstateInputs, 
  soTienVay: number
): Pick<CalculationSteps, 'tienTraNHThang' | 'chiPhiBaoTriThang' | 'duPhongCapExThang' | 'baoHiemTaiSanThang' | 'tongChiPhiVanHanh'> {
  
  // T√≠nh ti·ªÅn tr·∫£ ng√¢n h√†ng theo giai ƒëo·∫°n (∆∞u ƒë√£i vs th·∫£ n·ªïi)
  const paymentDetails = calculateDetailedPayments(
    soTienVay,
    inputs.laiSuatUuDai,
    inputs.thoiGianUuDai,
    inputs.laiSuatThaNoi,
    inputs.thoiGianVay
  );
  
  // S·ª≠ d·ª•ng ti·ªÅn tr·∫£ ∆∞u ƒë√£i cho th√°ng hi·ªán t·∫°i (c√≥ th·ªÉ m·ªü r·ªông ƒë·ªÉ t√≠nh theo th·ªùi gian)
  const tienTraNHThang = Math.abs(paymentDetails.tienTraUuDai);
  
  // C√°c chi ph√≠ kh√°c t√≠nh theo c√¥ng th·ª©c % nƒÉm chia 12
  const chiPhiBaoTriThang = (inputs.giaTriBDS * inputs.phiBaoTri / 100) / 12;
  const duPhongCapExThang = (inputs.giaTriBDS * inputs.duPhongCapEx / 100) / 12;
  const baoHiemTaiSanThang = (inputs.giaTriBDS * inputs.baoHiemTaiSan / 100) / 12;
  
  const tongChiPhiVanHanh = tienTraNHThang + inputs.phiQuanLy + chiPhiBaoTriThang + duPhongCapExThang + baoHiemTaiSanThang;
  
  return {
    tienTraNHThang,
    chiPhiBaoTriThang,
    duPhongCapExThang,
    baoHiemTaiSanThang,
    tongChiPhiVanHanh
  };
}

/**
 * B∆Ø·ªöC 3: T√≠nh D√≤ng Ti·ªÅn R√≤ng T·ª´ B·∫•t ƒê·ªông S·∫£n
 * Theo c√¥ng th·ª©c:
 * - ThuNhapThueHieuDung = TienThueThang * TyLeLapDay
 * - ThueChoThue_Thang = ThuNhapThueHieuDung * ThueSuatChoThue
 * - DongTienRongBDS = ThuNhapThueHieuDung - TongChiPhiVanHanh - ThueChoThue_Thang
 */
function calculatePropertyNetCashFlow(
  inputs: RealEstateInputs,
  tongChiPhiVanHanh: number
): Pick<CalculationSteps, 'thuNhapThueHieuDung' | 'thueChoThue_Thang' | 'dongTienRongBDS'> {
  
  const thuNhapThueHieuDung = inputs.tienThueThang * (inputs.tyLeLapDay / 100);
  const thueChoThue_Thang = thuNhapThueHieuDung * (inputs.thueSuatChoThue / 100);
  const dongTienRongBDS = thuNhapThueHieuDung - tongChiPhiVanHanh - thueChoThue_Thang;
  
  return {
    thuNhapThueHieuDung,
    thueChoThue_Thang,
    dongTienRongBDS
  };
}

/**
 * B∆Ø·ªöC 4: T√≠nh D√≤ng Ti·ªÅn Cu·ªëi C√πng
 * Theo c√¥ng th·ª©c:
 * - DongTienCuoiCung = (ThuNhapKhac - ChiPhiSinhHoat) + DongTienRongBDS
 */
function calculateFinalCashFlow(
  inputs: RealEstateInputs,
  dongTienRongBDS: number
): Pick<CalculationSteps, 'dongTienCuoiCung'> {
  
  const dongTienCuoiCung = (inputs.thuNhapKhac - inputs.chiPhiSinhHoat) + dongTienRongBDS;
  
  return {
    dongTienCuoiCung
  };
}

/**
 * T√≠nh to√°n c√°c ch·ªâ s·ªë ph√¢n t√≠ch n√¢ng cao
 */
function calculateAdvancedMetrics(inputs: RealEstateInputs, steps: CalculationSteps) {
  // ROI h√†ng nƒÉm d·ª±a tr√™n d√≤ng ti·ªÅn r√≤ng t·ª´ BƒêS
  const roiHangNam = calculateCashOnCashReturn(steps.tongVonBanDau, steps.dongTienRongBDS * 12);
  
  // Rental Yield
  const rentalYield = calculateRentalYield(inputs.giaTriBDS, inputs.tienThueThang, inputs.tyLeLapDay);
  
  // T·∫°o m·∫£ng d√≤ng ti·ªÅn h√†ng th√°ng ƒë·ªÉ t√≠nh NPV v√† Payback Period
  const monthlyCashFlows = Array(inputs.thoiGianVay * 12).fill(steps.dongTienRongBDS);
  
  // NPV v·ªõi discount rate 10% (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
  const discountRate = 10;
  const netPresentValue = calculateNPV(steps.tongVonBanDau, monthlyCashFlows, discountRate);
  
  // Payback Period
  const paybackPeriod = calculatePaybackPeriod(steps.tongVonBanDau, monthlyCashFlows);
  
  return {
    roiHangNam,
    netPresentValue,
    paybackPeriod: paybackPeriod > 0 ? paybackPeriod : -1,
    rentalYield
  };
}

/**
 * T·∫°o c·∫£nh b√°o d·ª±a tr√™n k·∫øt qu·∫£ t√≠nh to√°n
 */
function generateWarnings(inputs: RealEstateInputs, steps: CalculationSteps): string[] {
  const warnings: string[] = [];
  
  // C·∫£nh b√°o t·ª∑ l·ªá vay cao
  if (inputs.tyLeVay > 80) {
    warnings.push(`‚ö†Ô∏è T·ª∑ l·ªá vay ${inputs.tyLeVay}% qu√° cao, r·ªßi ro t√†i ch√≠nh l·ªõn`);
  }
  
  // C·∫£nh b√°o d√≤ng ti·ªÅn √¢m
  if (steps.dongTienRongBDS < 0) {
    warnings.push(`‚ö†Ô∏è D√≤ng ti·ªÅn r√≤ng t·ª´ BƒêS √¢m ${Math.abs(steps.dongTienRongBDS).toLocaleString('vi-VN')} VNƒê/th√°ng`);
  }
  
  if (steps.dongTienCuoiCung < 0) {
    warnings.push(`‚ö†Ô∏è D√≤ng ti·ªÅn c√° nh√¢n cu·ªëi c√πng √¢m ${Math.abs(steps.dongTienCuoiCung).toLocaleString('vi-VN')} VNƒê/th√°ng`);
  }
  
  // C·∫£nh b√°o t·ª∑ l·ªá l·∫•p ƒë√¢y th·∫•p
  if (inputs.tyLeLapDay < 90) {
    warnings.push(`‚ö†Ô∏è T·ª∑ l·ªá l·∫•p ƒë·∫ßy ${inputs.tyLeLapDay}% th·∫•p, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng d√≤ng ti·ªÅn`);
  }
  
  // C·∫£nh b√°o thu nh·∫≠p kh√¥ng ƒë·ªß
  const incomeRatio = (inputs.thuNhapKhac - inputs.chiPhiSinhHoat) / inputs.thuNhapKhac;
  if (incomeRatio < 0.2) {
    warnings.push(`‚ö†Ô∏è Thu nh·∫≠p kh·∫£ d·ª•ng ch·ªâ ${(incomeRatio * 100).toFixed(1)}%, r·ªßi ro t√†i ch√≠nh cao`);
  }
  
  // C·∫£nh b√°o rental yield th·∫•p
  const rentalYield = calculateRentalYield(inputs.giaTriBDS, inputs.tienThueThang, inputs.tyLeLapDay);
  if (rentalYield < 5) {
    warnings.push(`‚ö†Ô∏è T·ª∑ su·∫•t cho thu√™ ${rentalYield.toFixed(2)}%/nƒÉm th·∫•p so v·ªõi m·∫∑t b·∫±ng th·ªã tr∆∞·ªùng`);
  }
  
  return warnings;
}

/**
 * T·∫°o g·ª£i √Ω c·∫£i thi·ªán
 */
function generateSuggestions(inputs: RealEstateInputs, steps: CalculationSteps): string[] {
  const suggestions: string[] = [];
  
  // G·ª£i √Ω gi·∫£m t·ª∑ l·ªá vay
  if (inputs.tyLeVay > 70) {
    const betterRatio = 70;
    const newLoanAmount = inputs.giaTriBDS * (betterRatio / 100);
    const additionalCash = steps.soTienVay - newLoanAmount;
    suggestions.push(`üí° Gi·∫£m t·ª∑ l·ªá vay xu·ªëng ${betterRatio}% (tƒÉng v·ªën t·ª± c√≥ ${additionalCash.toLocaleString('vi-VN')} VNƒê) ƒë·ªÉ gi·∫£m r·ªßi ro`);
  }
  
  // G·ª£i √Ω tƒÉng ti·ªÅn thu√™
  if (steps.dongTienRongBDS < 0) {
    const neededRent = steps.tongChiPhiVanHanh + steps.thueChoThue_Thang;
    const increaseNeeded = neededRent - inputs.tienThueThang * (inputs.tyLeLapDay / 100);
    suggestions.push(`üí° C·∫ßn tƒÉng ti·ªÅn thu√™ th√™m ${increaseNeeded.toLocaleString('vi-VN')} VNƒê/th√°ng ƒë·ªÉ ƒë·∫°t h√≤a v·ªën`);
  }
  
  // G·ª£i √Ω c·∫£i thi·ªán t·ª∑ l·ªá l·∫•p ƒë·∫ßy
  if (inputs.tyLeLapDay < 95) {
    suggestions.push(`üí° C·∫£i thi·ªán t·ª∑ l·ªá l·∫•p ƒë·∫ßy l√™n 95% th√¥ng qua marketing v√† d·ªãch v·ª• t·ªët h∆°n`);
  }
  
  // G·ª£i √Ω t·ªëi ∆∞u chi ph√≠
  if (inputs.phiQuanLy > inputs.tienThueThang * 0.1) {
    suggestions.push(`üí° Ph√≠ qu·∫£n l√Ω chi·∫øm ${((inputs.phiQuanLy / inputs.tienThueThang) * 100).toFixed(1)}% ti·ªÅn thu√™, c√¢n nh·∫Øc t·ª± qu·∫£n l√Ω ho·∫∑c t√¨m c√¥ng ty r·∫ª h∆°n`);
  }
  
  // G·ª£i √Ω about CapEx reserve
  if (inputs.duPhongCapEx < 1) {
    suggestions.push(`üí° N√™n d·ª± ph√≤ng √≠t nh·∫•t 1% gi√° tr·ªã BƒêS/nƒÉm cho chi ph√≠ l·ªõn (CapEx) ƒë·ªÉ tr√°nh b·ªã ƒë·ªông`);
  }
  
  return suggestions;
}

/**
 * Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
 */
function validateInputs(inputs: RealEstateInputs): string[] {
  const errors: string[] = [];
  
  // Validate required fields
  if (!inputs.giaTriBDS || inputs.giaTriBDS <= 0) {
    errors.push('Gi√° tr·ªã BƒêS ph·∫£i l·ªõn h∆°n 0');
  }
  
  if (!inputs.thuNhapKhac || inputs.thuNhapKhac < 0) {
    errors.push('Thu nh·∫≠p kh√°c ph·∫£i ƒë∆∞·ª£c nh·∫≠p v√† kh√¥ng √¢m');
  }
  
  if (!inputs.chiPhiSinhHoat || inputs.chiPhiSinhHoat < 0) {
    errors.push('Chi ph√≠ sinh ho·∫°t ph·∫£i ƒë∆∞·ª£c nh·∫≠p v√† kh√¥ng √¢m');
  }
  
  if (!inputs.thoiGianVay || inputs.thoiGianVay <= 0) {
    errors.push('Th·ªùi gian vay ph·∫£i l·ªõn h∆°n 0');
  }
  
  // Validate financial parameters
  const financialErrors = validateFinancialInputs({
    laiSuatUuDai: inputs.laiSuatUuDai,
    laiSuatThaNoi: inputs.laiSuatThaNoi,
    tyLeVay: inputs.tyLeVay,
    thoiGianVay: inputs.thoiGianVay
  });
  
  errors.push(...financialErrors);
  
  // Validate percentages
  if (inputs.tyLeLapDay < 0 || inputs.tyLeLapDay > 100) {
    errors.push('T·ª∑ l·ªá l·∫•p ƒë·∫ßy ph·∫£i t·ª´ 0% ƒë·∫øn 100%');
  }
  
  if (inputs.thoiGianUuDai > inputs.thoiGianVay * 12) {
    errors.push('Th·ªùi gian ∆∞u ƒë√£i kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° th·ªùi gian vay');
  }
  
  return errors;
}

/**
 * T√≠nh to√°n chi ti·∫øt theo t·ª´ng th√°ng trong su·ªët th·ªùi gian vay
 * H·ªØu √≠ch cho vi·ªác t·∫°o bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn theo th·ªùi gian
 */
export function calculateMonthlyBreakdown(inputs: RealEstateInputs): {
  month: number;
  payment: number;
  principal: number;
  interest: number;
  balance: number;
  netCashFlow: number;
}[] {
  const totalMonths = inputs.thoiGianVay * 12;
  const breakdown: any[] = [];
  
  // T√≠nh chi ti·∫øt thanh to√°n cho c·∫£ hai giai ƒëo·∫°n
  const paymentDetails = calculateDetailedPayments(
    inputs.giaTriBDS * (inputs.tyLeVay / 100),
    inputs.laiSuatUuDai,
    inputs.thoiGianUuDai,
    inputs.laiSuatThaNoi,
    inputs.thoiGianVay
  );
  
  let remainingBalance = inputs.giaTriBDS * (inputs.tyLeVay / 100);
  
  for (let month = 1; month <= totalMonths; month++) {
    const isPreferentialPeriod = month <= inputs.thoiGianUuDai;
    const monthlyRate = (isPreferentialPeriod ? inputs.laiSuatUuDai : inputs.laiSuatThaNoi) / 100 / 12;
    const payment = Math.abs(isPreferentialPeriod ? paymentDetails.tienTraUuDai : paymentDetails.tienTraThaNoi);
    
    const interestPayment = remainingBalance * monthlyRate;
    const principalPayment = payment - interestPayment;
    
    remainingBalance = Math.max(0, remainingBalance - principalPayment);
    
    // T√≠nh d√≤ng ti·ªÅn r√≤ng (simplified)
    const result = calculateRealEstateInvestment(inputs);
    const netCashFlow = result.steps.dongTienRongBDS;
    
    breakdown.push({
      month,
      payment,
      principal: principalPayment,
      interest: interestPayment,
      balance: remainingBalance,
      netCashFlow
    });
  }
  
  return breakdown;
}