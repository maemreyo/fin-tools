import { RealEstateInputs, CalculationResult } from "@/types/real-estate";
import { calculateRealEstateInvestment } from "@/lib/real-estate-calculator";

// ===== ENHANCED TYPES =====
export interface MarketContext {
  marketType: "primary" | "secondary";
  investorType: "new_investor" | "existing_investor";
  purchaseDate?: Date;
  currentMarketValue?: number;
}

export interface EnhancedEconomicFactors {
  // Macro factors
  inflationRate: number;
  gdpGrowthRate: number;
  unemploymentRate: number;

  // Property market factors
  primaryMarketPriceChange: number; // Gi√° t·ª´ ch·ªß ƒë·∫ßu t∆∞
  secondaryMarketPriceChange: number; // Gi√° th·ªã tr∆∞·ªùng th·ª© c·∫•p
  newSupplyChange: number; // Ngu·ªìn cung m·ªõi

  // Rental market factors
  rentalDemandChange: number; // C·∫ßu thu√™ nh√†
  rentalSupplyChange: number; // Cung cho thu√™
  rentalPriceChange: number; // Gi√° thu√™ th·ªã tr∆∞·ªùng

  // Financial factors
  baseBankRateChange: number; // L√£i su·∫•t ng√¢n h√†ng trung ∆∞∆°ng
  bankLendingRateChange: number; // L√£i su·∫•t cho vay BƒêS
  creditAvailabilityChange: number; // Kh·∫£ nƒÉng ti·∫øp c·∫≠n t√≠n d·ª•ng

  // Market sentiment
  buyerSentiment: number; // T√¢m l√Ω ng∆∞·ªùi mua (-100 to +100)
  investorConfidence: number; // Ni·ªÅm tin nh√† ƒë·∫ßu t∆∞ (-100 to +100)
}

export interface EnhancedEconomicScenario {
  id: string;
  name: string;
  description: string;
  probability: number;
  timeframe: string;
  factors: EnhancedEconomicFactors;
  marketImpacts: {
    newInvestors: "positive" | "negative" | "neutral";
    existingInvestors: "positive" | "negative" | "neutral";
    rentalMarket: "positive" | "negative" | "neutral";
  };
  color: string;
  icon: string;
}

// ===== ENHANCED SCENARIO GENERATOR =====
export class EnhancedEconomicScenarioGenerator {
  /**
   * Generate scenarios v·ªõi proper market dynamics
   */
  static generateEnhancedScenarios(
    baseInputs: RealEstateInputs,
    marketContext: MarketContext,
    selectedScenarios?: string[]
  ): EnhancedGeneratedScenario[] {
    const scenarios = selectedScenarios
      ? ENHANCED_ECONOMIC_SCENARIOS.filter((s) =>
          selectedScenarios.includes(s.id)
        )
      : ENHANCED_ECONOMIC_SCENARIOS;

    return scenarios.map((scenario) => {
      const adjustedInputs = this.applyEnhancedEconomicFactors(
        baseInputs,
        scenario.factors,
        marketContext
      );
      const result = calculateRealEstateInvestment(adjustedInputs);
      const originalResult = calculateRealEstateInvestment(baseInputs);

      return {
        scenario,
        marketContext,
        originalInputs: baseInputs,
        adjustedInputs,
        result,
        impactAnalysis: this.analyzeEnhancedImpact(
          originalResult,
          result,
          scenario.factors,
          marketContext
        ),
      };
    });
  }

  /**
   * Apply economic factors v·ªõi correct logic cho different market contexts
   */
  private static applyEnhancedEconomicFactors(
    baseInputs: RealEstateInputs,
    factors: EnhancedEconomicFactors,
    context: MarketContext
  ): RealEstateInputs {
    const adjustedInputs = { ...baseInputs };

    // ===== PROPERTY PRICE LOGIC =====
    const basePrice = baseInputs.giaTriBDS || 0;

    if (context.investorType === "existing_investor") {
      // ƒê√£ mua r·ªìi - gi√° tƒÉng l√† GOOD cho existing investors
      // Nh∆∞ng ko ·∫£nh h∆∞·ªüng ƒë·∫øn purchase price (ƒë√£ mua r·ªìi)
      adjustedInputs.giaTriBDS = basePrice; // Keep original purchase price

      // Market value tƒÉng c√≥ th·ªÉ cho ph√©p refinance t·ªët h∆°n
      const marketValueIncrease =
        context.marketType === "primary"
          ? factors.primaryMarketPriceChange
          : factors.secondaryMarketPriceChange;

      if (marketValueIncrease > 0) {
        // C√≥ th·ªÉ refinance v·ªõi LTV t·ªët h∆°n
        const newMarketValue = basePrice * (1 + marketValueIncrease / 100);
        const maxLoanAmount = newMarketValue * 0.8; // 80% LTV
        const currentLoan = basePrice - (baseInputs.vonTuCo || 0);

        if (maxLoanAmount > currentLoan) {
          // C√≥ th·ªÉ r√∫t th√™m ti·ªÅn t·ª´ refinance
          // This would improve cash flow but we keep conservative for now
        }
      }
    } else {
      // New investor - gi√° tƒÉng l√† BAD (expensive to enter)
      const priceChange =
        context.marketType === "primary"
          ? factors.primaryMarketPriceChange
          : factors.secondaryMarketPriceChange;

      adjustedInputs.giaTriBDS = Math.max(
        1000000,
        basePrice * (1 + priceChange / 100)
      );
    }

    // ===== RENTAL MARKET LOGIC =====
    // Rental prices usually correlate v·ªõi property prices
    const baseRental = baseInputs.tienThueThang || 0;

    // Rental market dynamics
    const rentalSupplyDemandRatio =
      factors.rentalDemandChange - factors.rentalSupplyChange;
    const totalRentalChange =
      factors.rentalPriceChange + rentalSupplyDemandRatio * 0.5;

    adjustedInputs.tienThueThang = Math.max(
      0,
      baseRental * (1 + totalRentalChange / 100)
    );

    // ===== INTEREST RATE LOGIC =====
    const baseInterestUuDai = baseInputs.laiSuatUuDai || 8;
    const baseInterestThaNoi = baseInputs.laiSuatThaNoi || 10;

    // Bank lending rates affected by base rate + credit availability
    const lendingRateAdjustment =
      factors.baseBankRateChange + factors.bankLendingRateChange;
    const creditAdjustment = -factors.creditAvailabilityChange * 0.1; // Better credit = lower rates

    adjustedInputs.laiSuatUuDai = Math.max(
      0.1,
      baseInterestUuDai + lendingRateAdjustment + creditAdjustment
    );
    adjustedInputs.laiSuatThaNoi = Math.max(
      0.1,
      baseInterestThaNoi + lendingRateAdjustment + creditAdjustment
    );

    // ===== VACANCY RATE LOGIC =====
    const baseVacancyRate = 100 - (baseInputs.tyLeLapDay || 95);
    const rentalMarketTightness =
      factors.rentalDemandChange - factors.rentalSupplyChange;
    const newVacancyRate = Math.max(
      2, // Minimum 2% vacancy
      Math.min(20, baseVacancyRate - rentalMarketTightness * 0.2)
    );
    adjustedInputs.tyLeLapDay = 100 - newVacancyRate;

    // ===== OPERATING COSTS LOGIC =====
    const inflationMultiplier = 1 + factors.inflationRate / 100;

    adjustedInputs.phiQuanLy =
      (baseInputs.phiQuanLy || 0) * inflationMultiplier;
    adjustedInputs.phiBaoTri =
      (baseInputs.phiBaoTri || 1) * inflationMultiplier;
    adjustedInputs.baoHiemTaiSan =
      (baseInputs.baoHiemTaiSan || 0.1) * inflationMultiplier;

    return adjustedInputs;
  }

  /**
   * Enhanced impact analysis v·ªõi proper context
   */
  private static analyzeEnhancedImpact(
    originalResult: CalculationResult,
    newResult: CalculationResult,
    factors: EnhancedEconomicFactors,
    context: MarketContext
  ): EnhancedImpactAnalysis {
    const roiChange =
      (newResult.roiHangNam || 0) - (originalResult.roiHangNam || 0);
    const cashFlowChange =
      (newResult.steps?.dongTienRongBDS || 0) -
      (originalResult.steps?.dongTienRongBDS || 0);
    const paybackChange =
      (newResult.paybackPeriod || 0) - (originalResult.paybackPeriod || 0);

    // Risk assessment v·ªõi context
    let riskLevel: "low" | "medium" | "high" | "critical" = "low";

    if (
      newResult.steps?.dongTienRongBDS < -2000000 ||
      newResult.roiHangNam < 0
    ) {
      riskLevel = "critical";
    } else if (
      newResult.steps?.dongTienRongBDS < 0 ||
      newResult.roiHangNam < 5
    ) {
      riskLevel = "high";
    } else if (roiChange < -3 || cashFlowChange < -1000000) {
      riskLevel = "medium";
    }

    // Context-aware impacts
    const keyImpacts: string[] = [];

    // Different messaging cho different investor types
    if (context.investorType === "existing_investor") {
      if (
        factors.primaryMarketPriceChange > 0 ||
        factors.secondaryMarketPriceChange > 0
      ) {
        const priceChange =
          context.marketType === "primary"
            ? factors.primaryMarketPriceChange
            : factors.secondaryMarketPriceChange;
        keyImpacts.push(`üè† Gi√° tr·ªã t√†i s·∫£n tƒÉng ${priceChange.toFixed(1)}%`);
      }

      if (factors.rentalPriceChange > 0) {
        keyImpacts.push(
          `üìà Thu nh·∫≠p thu√™ tƒÉng ${factors.rentalPriceChange.toFixed(1)}%`
        );
      }
    } else {
      // New investor
      if (
        factors.primaryMarketPriceChange > 0 ||
        factors.secondaryMarketPriceChange > 0
      ) {
        const priceChange =
          context.marketType === "primary"
            ? factors.primaryMarketPriceChange
            : factors.secondaryMarketPriceChange;
        keyImpacts.push(`‚ö†Ô∏è Chi ph√≠ mua tƒÉng ${priceChange.toFixed(1)}%`);
      }
    }

    if (Math.abs(roiChange) > 1) {
      keyImpacts.push(
        `üìä ROI ${roiChange > 0 ? "tƒÉng" : "gi·∫£m"} ${Math.abs(
          roiChange
        ).toFixed(1)}%`
      );
    }

    if (Math.abs(cashFlowChange) > 500000) {
      const changeInMillions = Math.abs(cashFlowChange) / 1000000;
      keyImpacts.push(
        `üí∞ D√≤ng ti·ªÅn ${
          cashFlowChange > 0 ? "tƒÉng" : "gi·∫£m"
        } ${changeInMillions.toFixed(1)}M/th√°ng`
      );
    }

    if (factors.bankLendingRateChange !== 0) {
      keyImpacts.push(
        `üè¶ L√£i su·∫•t ${
          factors.bankLendingRateChange > 0 ? "tƒÉng" : "gi·∫£m"
        } ${Math.abs(factors.bankLendingRateChange).toFixed(1)}%`
      );
    }

    // Market sentiment impacts
    if (factors.buyerSentiment < -30) {
      keyImpacts.push(`üò∞ T√¢m l√Ω ng∆∞·ªùi mua ti√™u c·ª±c`);
    } else if (factors.buyerSentiment > 30) {
      keyImpacts.push(`üòä T√¢m l√Ω ng∆∞·ªùi mua t√≠ch c·ª±c`);
    }

    return {
      roiChange,
      cashFlowChange,
      paybackChange,
      riskLevel,
      keyImpacts,
      marketContext: context,
      investorAdvice: this.generateInvestorAdvice(factors, context, riskLevel),
    };
  }

  /**
   * Generate advice d·ª±a tr√™n investor type v√† market context
   */
  private static generateInvestorAdvice(
    factors: EnhancedEconomicFactors,
    context: MarketContext,
    riskLevel: string
  ): string[] {
    const advice: string[] = [];

    if (context.investorType === "existing_investor") {
      if (
        factors.primaryMarketPriceChange > 5 ||
        factors.secondaryMarketPriceChange > 5
      ) {
        advice.push("üí° C√¢n nh·∫Øc refinance ƒë·ªÉ t·∫≠n d·ª•ng tƒÉng gi√° t√†i s·∫£n");
      }
      if (factors.rentalPriceChange > 3) {
        advice.push("üìà Th·ªùi ƒëi·ªÉm t·ªët ƒë·ªÉ tƒÉng gi√° thu√™");
      }
      if (riskLevel === "low" && factors.investorConfidence > 20) {
        advice.push("üéØ C√≥ th·ªÉ m·ªü r·ªông danh m·ª•c ƒë·∫ßu t∆∞");
      }
    } else {
      // New investor
      if (factors.primaryMarketPriceChange > 10) {
        advice.push("‚è≥ C√¢n nh·∫Øc ƒë·ª£i th·ªã tr∆∞·ªùng ƒëi·ªÅu ch·ªânh");
      }
      if (factors.creditAvailabilityChange < -20) {
        advice.push(
          "üè¶ Kh√≥ khƒÉn ti·∫øp c·∫≠n t√≠n d·ª•ng, chu·∫©n b·ªã v·ªën t·ª± c√≥ cao h∆°n"
        );
      }
      if (context.marketType === "secondary" && factors.buyerSentiment < -20) {
        advice.push("üí∞ C∆° h·ªôi th∆∞∆°ng l∆∞·ª£ng gi√° t·ªët t·ª´ ng∆∞·ªùi b√°n");
      }
    }

    if (riskLevel === "high" || riskLevel === "critical") {
      advice.push("‚ö†Ô∏è T√¨nh h√¨nh r·ªßi ro cao, c·∫ßn ƒë√°nh gi√° k·ªπ l∆∞·ª°ng");
    }

    return advice;
  }
}

// ===== ENHANCED SCENARIOS =====
export const ENHANCED_ECONOMIC_SCENARIOS: EnhancedEconomicScenario[] = [
  {
    id: "property_boom",
    name: "üöÄ B√πng n·ªï B·∫•t ƒë·ªông s·∫£n",
    description: "Gi√° BƒêS tƒÉng m·∫°nh, c·∫ßu cao, ngu·ªìn cung khan hi·∫øm",
    probability: 20,
    timeframe: "1-2 nƒÉm",
    factors: {
      inflationRate: 5,
      gdpGrowthRate: 7,
      unemploymentRate: 4,
      primaryMarketPriceChange: 8, // Ch·ªß ƒë·∫ßu t∆∞ tƒÉng gi√°
      secondaryMarketPriceChange: 15, // Th·ªã tr∆∞·ªùng th·ª© c·∫•p tƒÉng m·∫°nh h∆°n
      newSupplyChange: -20, // Ngu·ªìn cung m·ªõi gi·∫£m
      rentalDemandChange: 10, // C·∫ßu thu√™ tƒÉng
      rentalSupplyChange: -5, // Cung cho thu√™ gi·∫£m
      rentalPriceChange: 12, // Gi√° thu√™ tƒÉng m·∫°nh
      baseBankRateChange: 0.5,
      bankLendingRateChange: 0.3,
      creditAvailabilityChange: -10, // Kh√≥ vay h∆°n
      buyerSentiment: 60, // T√¢m l√Ω mua m·∫°nh
      investorConfidence: 70, // Ni·ªÅm tin cao
    },
    marketImpacts: {
      newInvestors: "negative", // Kh√≥ v√†o th·ªã tr∆∞·ªùng
      existingInvestors: "positive", // T√†i s·∫£n tƒÉng gi√°
      rentalMarket: "positive", // Thu nh·∫≠p thu√™ tƒÉng
    },
    color: "text-orange-600",
    icon: "Rocket",
  },

  {
    id: "market_correction",
    name: "üìâ ƒêi·ªÅu ch·ªânh Th·ªã tr∆∞·ªùng",
    description: "Gi√° BƒêS gi·∫£m, thanh kho·∫£n th·∫•p, c∆° h·ªôi cho ng∆∞·ªùi mua",
    probability: 25,
    timeframe: "6-18 th√°ng",
    factors: {
      inflationRate: 3,
      gdpGrowthRate: 3,
      unemploymentRate: 7,
      primaryMarketPriceChange: -2, // Ch·ªß ƒë·∫ßu t∆∞ gi·∫£m gi√° nh·∫π
      secondaryMarketPriceChange: -8, // Th·ªã tr∆∞·ªùng th·ª© c·∫•p gi·∫£m m·∫°nh
      newSupplyChange: 15, // Ngu·ªìn cung m·ªõi tƒÉng
      rentalDemandChange: -5, // C·∫ßu thu√™ gi·∫£m
      rentalSupplyChange: 10, // Cung cho thu√™ tƒÉng
      rentalPriceChange: -3, // Gi√° thu√™ gi·∫£m
      baseBankRateChange: -0.5,
      bankLendingRateChange: -0.2,
      creditAvailabilityChange: 15, // D·ªÖ vay h∆°n ƒë·ªÉ k√≠ch th√≠ch
      buyerSentiment: -40, // T√¢m l√Ω mua y·∫øu
      investorConfidence: -30, // Ni·ªÅm tin gi·∫£m
    },
    marketImpacts: {
      newInvestors: "positive", // C∆° h·ªôi mua r·∫ª
      existingInvestors: "negative", // T√†i s·∫£n gi·∫£m gi√°
      rentalMarket: "negative", // Thu nh·∫≠p thu√™ gi·∫£m
    },
    color: "text-red-600",
    icon: "TrendingDown",
  },

  {
    id: "rental_boom",
    name: "üè† B√πng n·ªï Th·ªã tr∆∞·ªùng Thu√™",
    description: "C·∫ßu thu√™ nh√† tƒÉng m·∫°nh, gi√° thu√™ cao, vacancy th·∫•p",
    probability: 30,
    timeframe: "1-3 nƒÉm",
    factors: {
      inflationRate: 4,
      gdpGrowthRate: 6,
      unemploymentRate: 5,
      primaryMarketPriceChange: 3, // Gi√° mua tƒÉng nh·∫π
      secondaryMarketPriceChange: 5,
      newSupplyChange: -10, // Ngu·ªìn cung m·ªõi gi·∫£m
      rentalDemandChange: 20, // C·∫ßu thu√™ tƒÉng m·∫°nh
      rentalSupplyChange: -8, // Cung cho thu√™ gi·∫£m
      rentalPriceChange: 15, // Gi√° thu√™ tƒÉng m·∫°nh
      baseBankRateChange: 0,
      bankLendingRateChange: 0.2,
      creditAvailabilityChange: 0,
      buyerSentiment: 20,
      investorConfidence: 50,
    },
    marketImpacts: {
      newInvestors: "positive", // ROI t·ª´ thu√™ t·ªët
      existingInvestors: "positive", // Thu nh·∫≠p thu√™ tƒÉng
      rentalMarket: "positive", // Th·ªã tr∆∞·ªùng thu√™ m·∫°nh
    },
    color: "text-green-600",
    icon: "Home",
  },

  {
    id: "interest_spike",
    name: "üìà L√£i su·∫•t TƒÉng ƒë·ªôt bi·∫øn",
    description: "NHNN tƒÉng l√£i su·∫•t ƒë·ªÉ ki·ªÉm so√°t l·∫°m ph√°t",
    probability: 15,
    timeframe: "6-12 th√°ng",
    factors: {
      inflationRate: 8,
      gdpGrowthRate: 4,
      unemploymentRate: 6,
      primaryMarketPriceChange: -1, // Gi√° gi·∫£m nh·∫π do l√£i su·∫•t
      secondaryMarketPriceChange: -5,
      newSupplyChange: 5,
      rentalDemandChange: 5, // Nhi·ªÅu ng∆∞·ªùi chuy·ªÉn sang thu√™
      rentalSupplyChange: -2,
      rentalPriceChange: 3, // Gi√° thu√™ tƒÉng nh·∫π
      baseBankRateChange: 2, // NHNN tƒÉng m·∫°nh
      bankLendingRateChange: 3, // Ng√¢n h√†ng tƒÉng theo
      creditAvailabilityChange: -30, // Kh√≥ vay nhi·ªÅu
      buyerSentiment: -50, // T√¢m l√Ω mua r·∫•t y·∫øu
      investorConfidence: -40,
    },
    marketImpacts: {
      newInvestors: "negative", // Kh√≥ vay, ROI gi·∫£m
      existingInvestors: "negative", // Chi ph√≠ l√£i tƒÉng
      rentalMarket: "positive", // C·∫ßu thu√™ tƒÉng
    },
    color: "text-purple-600",
    icon: "AlertTriangle",
  },
];

// ===== ENHANCED TYPES =====
export interface EnhancedGeneratedScenario {
  scenario: EnhancedEconomicScenario;
  marketContext: MarketContext;
  originalInputs: RealEstateInputs;
  adjustedInputs: RealEstateInputs;
  result: CalculationResult;
  impactAnalysis: EnhancedImpactAnalysis;
}

export interface EnhancedImpactAnalysis {
  roiChange: number;
  cashFlowChange: number;
  paybackChange: number;
  riskLevel: "low" | "medium" | "high" | "critical";
  keyImpacts: string[];
  marketContext: MarketContext;
  investorAdvice: string[];
}
